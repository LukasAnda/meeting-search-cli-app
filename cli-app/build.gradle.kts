/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    kotlin("jvm") version "1.4.21"

    // Apply the application plugin to add support for building a CLI application.
    application
}

repositories {
    jcenter()
    mavenCentral()
    maven("https://dl.bintray.com/kotlin/kotlinx/")
}

dependencies {
    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("com.github.ajalt:clikt:2.8.0")
    implementation("org.apache.commons:commons-compress:1.10")
    implementation("com.github.florianingerl.util:regex:1.1.9")
    implementation("joda-time:joda-time:2.10.8")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2")
    implementation("com.github.jillesvangurp:es-kotlin-client:v1.0.0-RC0-7.9.3")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.12.0-rc2")
    implementation("org.apache.commons:commons-text:1.9")
    implementation("org.slf4j:slf4j-api:1.7.30")
    implementation("org.slf4j:jcl-over-slf4j:1.7.30")
    implementation("org.slf4j:log4j-over-slf4j:1.7.30")
    implementation("org.slf4j:jul-to-slf4j:1.7.30")
    implementation("org.apache.logging.log4j:log4j-to-slf4j:2.14.0") // es seems to insist on log4j2
    implementation("ch.qos.logback:logback-classic:1.2.3")
    implementation("com.jakewharton.picnic:picnic:0.5.0")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
    kotlinOptions {
        jvmTarget="1.8"
    }
}

application {
    // Define the main class for the application
    mainClassName = "sk.vinf.cli.app.AppKt"
}

val jar by tasks.getting(Jar::class) {
    manifest {
        attributes["Main-Class"] = "sk.vinf.cli.app.AppKt"
    }
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
}