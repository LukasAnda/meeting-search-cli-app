/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sk.vinf.cli.app


import sk.vinf.cli.app.utils.Finder
import sk.vinf.cli.app.utils.Inserter
import sk.vinf.cli.app.utils.Parser
import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.core.subcommands
import com.github.ajalt.clikt.parameters.options.*
import com.github.ajalt.clikt.parameters.types.int
import java.io.File

class Meetings() : CliktCommand() {
    override fun run() = Unit
}

class Parse() : CliktCommand() {
    private val sourcePath by option(
        names = arrayOf("-s", "--source"),
        help = "Source file of dump"
    ).required().validate {
        require(File(it).exists())
    }

    private val destinationPath by option(
        names = arrayOf("-d", "--destination"),
        help = "Destination file of parsed dump"
    ).required()

    override fun run() {
        val source = File(sourcePath)
        val dest = File(destinationPath)
        Parser.parse(source, dest)
    }
}

class Import() : CliktCommand() {
    private val importFile by option(
        names = arrayOf("-s", "--source"),
        help = "Parsed file from parser command to import into Elastic"
    ).required()

    private val host by option(
        names = arrayOf("-h", "--host"),
        help = "Custom host of elasticsearch instance, default is localhost"
    ).default("localhost")

    private val port by option(
        names = arrayOf("-p", "--port"),
        help = "Custom port of elasticsearch instance, default is 9200"
    ).int().default(9200)

    private val logGranularity by option(
        names = arrayOf("-g", "--granularity"),
        help = "Import logging granularity, 0 will disable logging, default is 5000"
    ).int().default(5000)

    override fun run() {
        Inserter.insert(host, port, importFile, logGranularity)
    }
}

class Search() : CliktCommand() {
    private val firstName by option(
        help = "First person name to find"
    ).prompt("First person name")

    private val secondName by option(
        help = "Second person name to find"
    ).prompt("Second person name")

    private val host by option(
        names = arrayOf("-h", "--host"),
        help = "Custom host of elasticsearch instance, default is localhost"
    ).default("localhost")

    private val port by option(
        names = arrayOf("-p", "--port"),
        help = "Custom port of elasticsearch instance, default is 9200"
    ).int().default(9200)

    override fun run() {
        Finder.search(host, port, firstName, secondName)
    }
}

fun main(args: Array<String>) = Meetings().subcommands(Parse(), Search(), Import()).main(args)